#!/usr/bin/env ruby

require 'open3'
require 'optparse'
require 'optparse/date'
require 'rake/file_list'

DEFAULT_OPTIONS = {
  since:  Date.today - 7,
  before: Date.today,
}.freeze

GIT_COMMAND = lambda do |since, before|
  "git log --author='Matthew Erhard' --date=short --pretty='%h %ad | %s'" \
  " --since=#{since.strftime('%Y-%m-%d')}" \
  " --before=#{before.strftime('%Y-%m-%d')}"
end

REPO_DIRS =
  Rake::FileList.new(
    File.join(Dir.home, 'Projects', '**', '.git')
  ) do |fl|
    fl.exclude(/node_modules/)
    fl.exclude(/tmp/)
  end.pathmap('%d')

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: git_history [options]'

  opts.separator ""
  opts.separator "Options:"

  default_start_value = DEFAULT_OPTIONS[:since].strftime('%Y-%m-%d')
  opts.on(
    '-s',
    '--start YYYY-MM-DD',
    Date,
    "Start date of search (default: #{default_start_value})"
  ) do |since|
    options[:since] = since
  end

  default_end_value = DEFAULT_OPTIONS[:before].strftime('%Y-%m-%d')
  opts.on(
    '-e',
    '--end   YYYY-MM-DD',
    Date,
    "End date of search   (default: #{default_end_value})"
  ) do |before|
    options[:before] = before
  end

  opts.separator ""

  opts.on('-m', '--month YYYY-MM', "Month of search") do |year_month|
    year, month = year_month.split(/-/).map(&:to_i)

    options[:since]  ||= Date.new(year, month, 1)
    options[:before] ||= Date.new(year, month + 1, 1) - 1
  end

  opts.on('-y', '--yesterday', "Start of search is yesterday") do
    options[:since] = Date.today - 1
  end

  opts.separator ""

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Searched Repositories:"
  REPO_DIRS.each { |repo| opts.separator("    #{repo}") }

  opts.separator ""
  opts.separator "Example Git Command:"
  opts.separator(
    "    #{GIT_COMMAND.call(DEFAULT_OPTIONS[:since], DEFAULT_OPTIONS[:before])}"
  )
  opts.separator ""
end.parse!

class GitHistory
  def self.run(**opts)
    new(**opts).run
  end

  attr_reader :cmd

  def initialize(since:, before:)
    @cmd = GIT_COMMAND.call(since, before)
  end

  def run
    histories = REPO_DIRS.map { |repo| git_history(repo) }.compact
    puts histories.unshift(cmd).join("\n\n")
  end

  def git_history(repo)
    cmd_output = ''
    FileUtils.cd(repo, verbose: false) do
      stdout_and_stderr, _status = Open3.capture2e(cmd)
      cmd_output << stdout_and_stderr.chomp
    end

    "#{repo}\n#{cmd_output}" unless cmd_output.empty?
  end
end

GitHistory.run(DEFAULT_OPTIONS.dup.merge(options))
